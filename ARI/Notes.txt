/*****************************************************************************/
Sequence diagram showing communication calls and command types used.
For https://www.websequencediagrams.com

title ARI System level Communication Sequence

participant App
participant Client
participant Server
participant Client2
participant App2

note right of App: Create clientInfo and send to server.

App->Client: registerValue("val1", ...
App->Client: registerFunction("func1", function(){...})
App->Client: ...
Client->Server: CLIENTINFO(clientInfo);

App2->Client2: registerValue("val1", val1CBFunc(){...}...
Client2->Server: CLIENTINFO(clientInfo)


note right of App: Dynamically watch or subscribe...

App->Client: watchValue(App2.val1, watchCB(){...}
Client->Server: WATCH(App2.val1);


note right of App: Set remote value sequence.

App->Client: setValue(App2.val1, value)
Client->Server: SETVALUE(App2.val1, value);
Server->Client2: SETVALUE(val1, value); 
Client2->App2: val1CBFunc(val1, value); 
App2->Client2: setValue(val1, value);
Client2->Server: VALUE(val1, value)
Server->Client: VALUE(App2.val1, value)
Client->App: watchCB(App2.val1, value)


note right of App: Set local value sequence.

App->Client: setValue(val1, value)
Client->Server: VALUE(val1, value);


note right of App: ALIAS handling

App->Client: watchValue(alias1, watchCB(){...}
Client->Server: WATCH(alias1);

App->Client: setValue(alias1, value)
Client->Server: SETVALUE(alias1, value);
Server->Client2: SETVALUE(val1, value); 
Client2->App2: val1CBFunc(val1, value); 
App2->Client2: setValue(val1, value);
Client2->Server: VALUE(val1, value)
Server->Client: VALUE(App2.val1 or alias1???, value)
Client->App: watchCB(App2.val1 or alias1???, value)


/*****************************************************************************/
to debug node-red use this command:
node-debug node_modules/node-red/red.js -v -s settings.js

//-----------------------------------------------------------------------------
Devices vs. Users:
Devices:
	Register deviceInfo...
	Has role: Device (sensuator) vs. controller (able to set other device values).
	
Users:
	Has role: Get rights
	Can store data in own file area - handled by pluign?

Thoughts:
Device: LivingroomDoorPanel
User: Admin/.../Guest
Values: 
	LivingroomDoorPanel.LightScene = 1...5
	LivingroomDoorPanel.FunctionScene = "Home theater mode", "Full Light", "Watch TV", "Dine".
View on device "LivingroomDoorPanel"


GUI_Builder
	Functions
		loadPanel
		savePanel
		listPanels
	Values
		LivingroomDoorPanel.LightScene = 1...5
		LivingroomDoorPanel.FunctionScene = "Home theater mode", "Full Light", "Watch TV", "Dine".
		OfficePanel.LightScene = 1...5
		OfficePanel.FunctionScene = "Home theater mode", "Full Light", "Watch TV", "Dine".
		OfficePanel.MainLightState = On







widgetInfo.attributes.max.type = "number"	// Used by editor
widgetInfo.attributes.max.default = "30"	// Used by editor to reset to default
widgetInfo.attributes.max.code = "30"		// Used to create ngAriValues to update x.value? --- Dest param = "widgetInfo.attributes.max.value" ???
widgetInfo.attributes.max.value = "30"		// Live value used by the element and DOM.

widgetInfo.attributes.value.code = "{{Livingroom.Temperature}}"
widgetInfo.attributes.value.value = "22.3"
